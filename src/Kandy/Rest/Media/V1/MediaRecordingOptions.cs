/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Kandy - Media
 * This is the public Kandy REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Kandy.Base;
using Kandy.Converters;




namespace Kandy.Rest.Media.V1
{
    /// <summary> Deletes a MediaRecording resource identified by a SID. </summary>
    public class DeleteMediaRecordingOptions : IOptions<MediaRecordingResource>
    {

        ///<summary> The SID of the MediaRecording resource to delete. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteMediaRecordingOptions </summary>
        /// <param name="pathSid"> The SID of the MediaRecording resource to delete. </param>
        public DeleteMediaRecordingOptions(string pathSid)
        {
            PathSid = pathSid;
        }


        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }


    }


    /// <summary> Returns a single MediaRecording resource identified by a SID. </summary>
    public class FetchMediaRecordingOptions : IOptions<MediaRecordingResource>
    {

        ///<summary> The SID of the MediaRecording resource to fetch. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchMediaRecordingOptions </summary>
        /// <param name="pathSid"> The SID of the MediaRecording resource to fetch. </param>
        public FetchMediaRecordingOptions(string pathSid)
        {
            PathSid = pathSid;
        }


        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }


    }


    /// <summary> Returns a list of MediaRecordings. </summary>
    public class ReadMediaRecordingOptions : ReadOptions<MediaRecordingResource>
    {

        ///<summary> The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default. </summary> 
        public MediaRecordingResource.OrderEnum Order { get; set; }

        ///<summary> Status to filter by, with possible values `processing`, `completed`, `deleted`, or `failed`. </summary> 
        public MediaRecordingResource.StatusEnum Status { get; set; }

        ///<summary> SID of a MediaProcessor to filter by. </summary> 
        public string ProcessorSid { get; set; }

        ///<summary> SID of a MediaRecording source to filter by. </summary> 
        public string SourceSid { get; set; }





        /// <summary> Generate the necessary parameters </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Order != null)
            {
                p.Add(new KeyValuePair<string, string>("Order", Order.ToString()));
            }
            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }
            if (ProcessorSid != null)
            {
                p.Add(new KeyValuePair<string, string>("ProcessorSid", ProcessorSid));
            }
            if (SourceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("SourceSid", SourceSid));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }


    }

}
