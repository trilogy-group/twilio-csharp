/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Kandy - Preview
 * This is the public Kandy REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Kandy.Base;
using Kandy.Converters;




namespace Kandy.Rest.Preview.Understand.Assistant
{

    /// <summary> create </summary>
    public class CreateQueryOptions : IOptions<QueryResource>
    {

        ///<summary> The unique ID of the parent Assistant. </summary> 
        public string PathAssistantSid { get; }

        ///<summary> An ISO language-country string of the sample. </summary> 
        public string Language { get; }

        ///<summary> A user-provided string that uniquely identifies this resource as an alternative to the sid. It can be up to 2048 characters long. </summary> 
        public string Query { get; }

        ///<summary> Constraints the query to a set of tasks. Useful when you need to constrain the paths the user can take. Tasks should be comma separated *task-unique-name-1*, *task-unique-name-2* </summary> 
        public string Tasks { get; set; }

        ///<summary> The Model Build Sid or unique name of the Model Build to be queried. </summary> 
        public string ModelBuild { get; set; }

        ///<summary> Constraints the query to a given Field with an task. Useful when you know the Field you are expecting. It accepts one field in the format *task-unique-name-1*:*field-unique-name* </summary> 
        public string Field { get; set; }


        /// <summary> Construct a new CreateUnderstandQueryOptions </summary>
        /// <param name="pathAssistantSid"> The unique ID of the parent Assistant. </param>
        /// <param name="language"> An ISO language-country string of the sample. </param>
        /// <param name="query"> A user-provided string that uniquely identifies this resource as an alternative to the sid. It can be up to 2048 characters long. </param>
        public CreateQueryOptions(string pathAssistantSid, string language, string query)
        {
            PathAssistantSid = pathAssistantSid;
            Language = language;
            Query = query;
        }


        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Language != null)
            {
                p.Add(new KeyValuePair<string, string>("Language", Language));
            }
            if (Query != null)
            {
                p.Add(new KeyValuePair<string, string>("Query", Query));
            }
            if (Tasks != null)
            {
                p.Add(new KeyValuePair<string, string>("Tasks", Tasks));
            }
            if (ModelBuild != null)
            {
                p.Add(new KeyValuePair<string, string>("ModelBuild", ModelBuild));
            }
            if (Field != null)
            {
                p.Add(new KeyValuePair<string, string>("Field", Field));
            }
            return p;
        }


    }
    /// <summary> delete </summary>
    public class DeleteQueryOptions : IOptions<QueryResource>
    {

        ///<summary> The unique ID of the Assistant. </summary> 
        public string PathAssistantSid { get; }

        ///<summary> A 34 character string that uniquely identifies this resource. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteUnderstandQueryOptions </summary>
        /// <param name="pathAssistantSid"> The unique ID of the Assistant. </param>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this resource. </param>
        public DeleteQueryOptions(string pathAssistantSid, string pathSid)
        {
            PathAssistantSid = pathAssistantSid;
            PathSid = pathSid;
        }


        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }


    }


    /// <summary> fetch </summary>
    public class FetchQueryOptions : IOptions<QueryResource>
    {

        ///<summary> The unique ID of the Assistant. </summary> 
        public string PathAssistantSid { get; }

        ///<summary> A 34 character string that uniquely identifies this resource. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchUnderstandQueryOptions </summary>
        /// <param name="pathAssistantSid"> The unique ID of the Assistant. </param>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this resource. </param>
        public FetchQueryOptions(string pathAssistantSid, string pathSid)
        {
            PathAssistantSid = pathAssistantSid;
            PathSid = pathSid;
        }


        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }


    }


    /// <summary> read </summary>
    public class ReadQueryOptions : ReadOptions<QueryResource>
    {

        ///<summary> The unique ID of the parent Assistant. </summary> 
        public string PathAssistantSid { get; }

        ///<summary> An ISO language-country string of the sample. </summary> 
        public string Language { get; set; }

        ///<summary> The Model Build Sid or unique name of the Model Build to be queried. </summary> 
        public string ModelBuild { get; set; }

        ///<summary> A string that described the query status. The values can be: pending_review, reviewed, discarded </summary> 
        public string Status { get; set; }



        /// <summary> Construct a new ListUnderstandQueryOptions </summary>
        /// <param name="pathAssistantSid"> The unique ID of the parent Assistant. </param>
        public ReadQueryOptions(string pathAssistantSid)
        {
            PathAssistantSid = pathAssistantSid;
        }


        /// <summary> Generate the necessary parameters </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Language != null)
            {
                p.Add(new KeyValuePair<string, string>("Language", Language));
            }
            if (ModelBuild != null)
            {
                p.Add(new KeyValuePair<string, string>("ModelBuild", ModelBuild));
            }
            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }


    }

    /// <summary> update </summary>
    public class UpdateQueryOptions : IOptions<QueryResource>
    {

        ///<summary> The unique ID of the parent Assistant. </summary> 
        public string PathAssistantSid { get; }

        ///<summary> A 34 character string that uniquely identifies this resource. </summary> 
        public string PathSid { get; }

        ///<summary> An optional reference to the Sample created from this query. </summary> 
        public string SampleSid { get; set; }

        ///<summary> A string that described the query status. The values can be: pending_review, reviewed, discarded </summary> 
        public string Status { get; set; }



        /// <summary> Construct a new UpdateUnderstandQueryOptions </summary>
        /// <param name="pathAssistantSid"> The unique ID of the parent Assistant. </param>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this resource. </param>
        public UpdateQueryOptions(string pathAssistantSid, string pathSid)
        {
            PathAssistantSid = pathAssistantSid;
            PathSid = pathSid;
        }


        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (SampleSid != null)
            {
                p.Add(new KeyValuePair<string, string>("SampleSid", SampleSid));
            }
            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status));
            }
            return p;
        }


    }


}
