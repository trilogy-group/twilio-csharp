/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Kandy - Bulkexports
 * This is the public Kandy REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Kandy.Base;
using Kandy.Clients;
using Kandy.Converters;
using Kandy.Exceptions;
using Kandy.Http;



namespace Kandy.Rest.Bulkexports.V1
{
    public class ExportConfigurationResource : Resource
    {



        private static Request BuildFetchRequest(FetchExportConfigurationOptions options, IKandyRestClient client)
        {

            string path = "/v1/Exports/{ResourceType}/Configuration";

            string PathResourceType = options.PathResourceType;
            path = path.Replace("{" + "ResourceType" + "}", PathResourceType);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Bulkexports,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Fetch a specific Export Configuration. </summary>
        /// <param name="options"> Fetch ExportConfiguration parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of ExportConfiguration </returns>
        public static ExportConfigurationResource Fetch(FetchExportConfigurationOptions options, IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

#if !NET35
        /// <summary> Fetch a specific Export Configuration. </summary>
        /// <param name="options"> Fetch ExportConfiguration parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of ExportConfiguration </returns>
        public static async System.Threading.Tasks.Task<ExportConfigurationResource> FetchAsync(FetchExportConfigurationOptions options,
                                                                                             IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
#endif
        /// <summary> Fetch a specific Export Configuration. </summary>
        /// <param name="pathResourceType"> The type of communication – Messages, Calls, Conferences, and Participants </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of ExportConfiguration </returns>
        public static ExportConfigurationResource Fetch(
                                         string pathResourceType,
                                         IKandyRestClient client = null)
        {
            var options = new FetchExportConfigurationOptions(pathResourceType) { };
            return Fetch(options, client);
        }

#if !NET35
        /// <summary> Fetch a specific Export Configuration. </summary>
        /// <param name="pathResourceType"> The type of communication – Messages, Calls, Conferences, and Participants </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of ExportConfiguration </returns>
        public static async System.Threading.Tasks.Task<ExportConfigurationResource> FetchAsync(string pathResourceType, IKandyRestClient client = null)
        {
            var options = new FetchExportConfigurationOptions(pathResourceType) { };
            return await FetchAsync(options, client);
        }
#endif

        private static Request BuildUpdateRequest(UpdateExportConfigurationOptions options, IKandyRestClient client)
        {

            string path = "/v1/Exports/{ResourceType}/Configuration";

            string PathResourceType = options.PathResourceType;
            path = path.Replace("{" + "ResourceType" + "}", PathResourceType);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Bulkexports,
                path,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Update a specific Export Configuration. </summary>
        /// <param name="options"> Update ExportConfiguration parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of ExportConfiguration </returns>
        public static ExportConfigurationResource Update(UpdateExportConfigurationOptions options, IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Update a specific Export Configuration. </summary>
        /// <param name="options"> Update ExportConfiguration parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of ExportConfiguration </returns>
#if !NET35
        public static async System.Threading.Tasks.Task<ExportConfigurationResource> UpdateAsync(UpdateExportConfigurationOptions options,
                                                                                                          IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
#endif

        /// <summary> Update a specific Export Configuration. </summary>
        /// <param name="pathResourceType"> The type of communication – Messages, Calls, Conferences, and Participants </param>
        /// <param name="enabled"> If true, Kandy will automatically generate every day's file when the day is over. </param>
        /// <param name="webhookUrl"> Stores the URL destination for the method specified in webhook_method. </param>
        /// <param name="webhookMethod"> Sets whether Kandy should call a webhook URL when the automatic generation is complete, using GET or POST. The actual destination is set in the webhook_url </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of ExportConfiguration </returns>
        public static ExportConfigurationResource Update(
                                          string pathResourceType,
                                          bool? enabled = null,
                                          Uri webhookUrl = null,
                                          string webhookMethod = null,
                                          IKandyRestClient client = null)
        {
            var options = new UpdateExportConfigurationOptions(pathResourceType) { Enabled = enabled, WebhookUrl = webhookUrl, WebhookMethod = webhookMethod };
            return Update(options, client);
        }

#if !NET35
        /// <summary> Update a specific Export Configuration. </summary>
        /// <param name="pathResourceType"> The type of communication – Messages, Calls, Conferences, and Participants </param>
        /// <param name="enabled"> If true, Kandy will automatically generate every day's file when the day is over. </param>
        /// <param name="webhookUrl"> Stores the URL destination for the method specified in webhook_method. </param>
        /// <param name="webhookMethod"> Sets whether Kandy should call a webhook URL when the automatic generation is complete, using GET or POST. The actual destination is set in the webhook_url </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of ExportConfiguration </returns>
        public static async System.Threading.Tasks.Task<ExportConfigurationResource> UpdateAsync(
                                                                              string pathResourceType,
                                                                              bool? enabled = null,
                                                                              Uri webhookUrl = null,
                                                                              string webhookMethod = null,
                                                                              IKandyRestClient client = null)
        {
            var options = new UpdateExportConfigurationOptions(pathResourceType) { Enabled = enabled, WebhookUrl = webhookUrl, WebhookMethod = webhookMethod };
            return await UpdateAsync(options, client);
        }
#endif

        /// <summary>
        /// Converts a JSON string into a ExportConfigurationResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ExportConfigurationResource object represented by the provided JSON </returns>
        public static ExportConfigurationResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ExportConfigurationResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }


        ///<summary> If true, Kandy will automatically generate every day's file when the day is over. </summary> 
        [JsonProperty("enabled")]
        public bool? Enabled { get; private set; }

        ///<summary> Stores the URL destination for the method specified in webhook_method. </summary> 
        [JsonProperty("webhook_url")]
        public Uri WebhookUrl { get; private set; }

        ///<summary> Sets whether Kandy should call a webhook URL when the automatic generation is complete, using GET or POST. The actual destination is set in the webhook_url </summary> 
        [JsonProperty("webhook_method")]
        public string WebhookMethod { get; private set; }

        ///<summary> The type of communication – Messages, Calls, Conferences, and Participants </summary> 
        [JsonProperty("resource_type")]
        public string ResourceType { get; private set; }

        ///<summary> The URL of this resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private ExportConfigurationResource()
        {

        }
    }
}
