/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Kandy - Ip_messaging
 * This is the public Kandy REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Kandy.Base;
using Kandy.Clients;
using Kandy.Converters;
using Kandy.Exceptions;
using Kandy.Http;
using Kandy.Types;


namespace Kandy.Rest.IpMessaging.V1.Service.User
{
    public class UserChannelResource : Resource
    {

        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class ChannelStatusEnum : StringEnum
        {
            private ChannelStatusEnum(string value) : base(value) { }
            public ChannelStatusEnum() { }
            public static implicit operator ChannelStatusEnum(string value)
            {
                return new ChannelStatusEnum(value);
            }
            public static readonly ChannelStatusEnum Joined = new ChannelStatusEnum("joined");
            public static readonly ChannelStatusEnum Invited = new ChannelStatusEnum("invited");
            public static readonly ChannelStatusEnum NotParticipating = new ChannelStatusEnum("not_participating");

        }


        private static Request BuildReadRequest(ReadUserChannelOptions options, IKandyRestClient client)
        {

            string path = "/v1/Services/{ServiceSid}/Users/{UserSid}/Channels";

            string PathServiceSid = options.PathServiceSid;
            path = path.Replace("{" + "ServiceSid" + "}", PathServiceSid);
            string PathUserSid = options.PathUserSid;
            path = path.Replace("{" + "UserSid" + "}", PathUserSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.IpMessaging,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> read </summary>
        /// <param name="options"> Read UserChannel parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of UserChannel </returns>
        public static ResourceSet<UserChannelResource> Read(ReadUserChannelOptions options, IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<UserChannelResource>.FromJson("channels", response.Content);
            return new ResourceSet<UserChannelResource>(page, options, client);
        }

#if !NET35
        /// <summary> read </summary>
        /// <param name="options"> Read UserChannel parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of UserChannel </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<UserChannelResource>> ReadAsync(ReadUserChannelOptions options,
                                                                                             IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<UserChannelResource>.FromJson("channels", response.Content);
            return new ResourceSet<UserChannelResource>(page, options, client);
        }
#endif
        /// <summary> read </summary>
        /// <param name="pathServiceSid">  </param>
        /// <param name="pathUserSid">  </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of UserChannel </returns>
        public static ResourceSet<UserChannelResource> Read(
                                                     string pathServiceSid,
                                                     string pathUserSid,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                     IKandyRestClient client = null)
        {
            var options = new ReadUserChannelOptions(pathServiceSid, pathUserSid) { PageSize = pageSize, Limit = limit };
            return Read(options, client);
        }

#if !NET35
        /// <summary> read </summary>
        /// <param name="pathServiceSid">  </param>
        /// <param name="pathUserSid">  </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of UserChannel </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<UserChannelResource>> ReadAsync(
                                                                                             string pathServiceSid,
                                                                                             string pathUserSid,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                             IKandyRestClient client = null)
        {
            var options = new ReadUserChannelOptions(pathServiceSid, pathUserSid) { PageSize = pageSize, Limit = limit };
            return await ReadAsync(options, client);
        }
#endif


        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> The target page of records </returns>
        public static Page<UserChannelResource> GetPage(string targetUrl, IKandyRestClient client)
        {
            client = client ?? KandyClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<UserChannelResource>.FromJson("channels", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> The next page of records </returns>
        public static Page<UserChannelResource> NextPage(Page<UserChannelResource> page, IKandyRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<UserChannelResource>.FromJson("channels", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> The previous page of records </returns>
        public static Page<UserChannelResource> PreviousPage(Page<UserChannelResource> page, IKandyRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<UserChannelResource>.FromJson("channels", response.Content);
        }


        /// <summary>
        /// Converts a JSON string into a UserChannelResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> UserChannelResource object represented by the provided JSON </returns>
        public static UserChannelResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<UserChannelResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }


        ///<summary> The account_sid </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The service_sid </summary> 
        [JsonProperty("service_sid")]
        public string ServiceSid { get; private set; }

        ///<summary> The channel_sid </summary> 
        [JsonProperty("channel_sid")]
        public string ChannelSid { get; private set; }

        ///<summary> The member_sid </summary> 
        [JsonProperty("member_sid")]
        public string MemberSid { get; private set; }


        [JsonProperty("status")]
        public UserChannelResource.ChannelStatusEnum Status { get; private set; }

        ///<summary> The last_consumed_message_index </summary> 
        [JsonProperty("last_consumed_message_index")]
        public int? LastConsumedMessageIndex { get; private set; }

        ///<summary> The unread_messages_count </summary> 
        [JsonProperty("unread_messages_count")]
        public int? UnreadMessagesCount { get; private set; }

        ///<summary> The links </summary> 
        [JsonProperty("links")]
        public Dictionary<string, string> Links { get; private set; }



        private UserChannelResource()
        {

        }
    }
}
