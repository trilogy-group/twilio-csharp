/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Kandy.Rest.Oauth.V1
{
    public class TokenResource : Resource
    {
    

        
        private static Request BuildCreateRequest(CreateTokenOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/token";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.Oauth,
                path,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Issues a new Access token (optionally identity_token & refresh_token) in exchange of Oauth grant </summary>
        /// <param name="options"> Create Token parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Token </returns>
        public static TokenResource Create(CreateTokenOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Issues a new Access token (optionally identity_token & refresh_token) in exchange of Oauth grant </summary>
        /// <param name="options"> Create Token parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Token </returns>
        public static async System.Threading.Tasks.Task<TokenResource> CreateAsync(CreateTokenOptions options,
        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> Issues a new Access token (optionally identity_token & refresh_token) in exchange of Oauth grant </summary>
        /// <param name="grantType"> Grant type is a credential representing resource owner's authorization which can be used by client to obtain access token. </param>
        /// <param name="clientSid"> A 34 character string that uniquely identifies this OAuth App. </param>
        /// <param name="clientSecret"> The credential for confidential OAuth App. </param>
        /// <param name="code"> JWT token related to the authorization code grant type. </param>
        /// <param name="codeVerifier"> A code which is generation cryptographically. </param>
        /// <param name="deviceCode"> JWT token related to the device code grant type. </param>
        /// <param name="refreshToken"> JWT token related to the refresh token grant type. </param>
        /// <param name="deviceId"> The Id of the device associated with the token (refresh token). </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Token </returns>
        public static TokenResource Create(
                                          string grantType,
                                          string clientSid,
                                          string clientSecret = null,
                                          string code = null,
                                          string codeVerifier = null,
                                          string deviceCode = null,
                                          string refreshToken = null,
                                          string deviceId = null,
                                          ITwilioRestClient client = null)
        {
            var options = new CreateTokenOptions(grantType, clientSid){  ClientSecret = clientSecret, Code = code, CodeVerifier = codeVerifier, DeviceCode = deviceCode, RefreshToken = refreshToken, DeviceId = deviceId };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> Issues a new Access token (optionally identity_token & refresh_token) in exchange of Oauth grant </summary>
        /// <param name="grantType"> Grant type is a credential representing resource owner's authorization which can be used by client to obtain access token. </param>
        /// <param name="clientSid"> A 34 character string that uniquely identifies this OAuth App. </param>
        /// <param name="clientSecret"> The credential for confidential OAuth App. </param>
        /// <param name="code"> JWT token related to the authorization code grant type. </param>
        /// <param name="codeVerifier"> A code which is generation cryptographically. </param>
        /// <param name="deviceCode"> JWT token related to the device code grant type. </param>
        /// <param name="refreshToken"> JWT token related to the refresh token grant type. </param>
        /// <param name="deviceId"> The Id of the device associated with the token (refresh token). </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Token </returns>
        public static async System.Threading.Tasks.Task<TokenResource> CreateAsync(
                                                                                  string grantType,
                                                                                  string clientSid,
                                                                                  string clientSecret = null,
                                                                                  string code = null,
                                                                                  string codeVerifier = null,
                                                                                  string deviceCode = null,
                                                                                  string refreshToken = null,
                                                                                  string deviceId = null,
                                                                                  ITwilioRestClient client = null)
        {
        var options = new CreateTokenOptions(grantType, clientSid){  ClientSecret = clientSecret, Code = code, CodeVerifier = codeVerifier, DeviceCode = deviceCode, RefreshToken = refreshToken, DeviceId = deviceId };
            return await CreateAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a TokenResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> TokenResource object represented by the provided JSON </returns>
        public static TokenResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<TokenResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

    
        ///<summary> Token which carries the necessary information to access a Twilio resource directly. </summary> 
        [JsonProperty("access_token")]
        public string AccessToken { get; private set; }

        ///<summary> Token which carries the information necessary to get a new access token. </summary> 
        [JsonProperty("refresh_token")]
        public string RefreshToken { get; private set; }

        ///<summary> The id_token </summary> 
        [JsonProperty("id_token")]
        public string IdToken { get; private set; }

        ///<summary> The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("refresh_token_expires_at")]
        public DateTime? RefreshTokenExpiresAt { get; private set; }

        ///<summary> The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("access_token_expires_at")]
        public DateTime? AccessTokenExpiresAt { get; private set; }



        private TokenResource() {

        }
    }
}
