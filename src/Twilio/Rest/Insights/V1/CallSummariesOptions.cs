/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Kandy.Rest.Insights.V1
{
    /// <summary> read </summary>
    public class ReadCallSummariesOptions : ReadOptions<CallSummariesResource>
    {
    
        
        public string From { get; set; }

        
        public string To { get; set; }

        
        public string FromCarrier { get; set; }

        
        public string ToCarrier { get; set; }

        
        public string FromCountryCode { get; set; }

        
        public string ToCountryCode { get; set; }

        
        public bool? Branded { get; set; }

        
        public bool? VerifiedCaller { get; set; }

        
        public bool? HasTag { get; set; }

        
        public string StartTime { get; set; }

        
        public string EndTime { get; set; }

        
        public string CallType { get; set; }

        
        public string CallState { get; set; }

        
        public string Direction { get; set; }

        
        public CallSummariesResource.ProcessingStateRequestEnum ProcessingState { get; set; }

        
        public CallSummariesResource.SortByEnum SortBy { get; set; }

        
        public string Subaccount { get; set; }

        
        public bool? AbnormalSession { get; set; }

        
        public CallSummariesResource.AnsweredByEnum AnsweredBy { get; set; }

        
        public string ConnectivityIssues { get; set; }

        
        public string QualityIssues { get; set; }

        
        public bool? Spam { get; set; }

        
        public string CallScores { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public  override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (From != null)
            {
                p.Add(new KeyValuePair<string, string>("From", From));
            }
            if (To != null)
            {
                p.Add(new KeyValuePair<string, string>("To", To));
            }
            if (FromCarrier != null)
            {
                p.Add(new KeyValuePair<string, string>("FromCarrier", FromCarrier));
            }
            if (ToCarrier != null)
            {
                p.Add(new KeyValuePair<string, string>("ToCarrier", ToCarrier));
            }
            if (FromCountryCode != null)
            {
                p.Add(new KeyValuePair<string, string>("FromCountryCode", FromCountryCode));
            }
            if (ToCountryCode != null)
            {
                p.Add(new KeyValuePair<string, string>("ToCountryCode", ToCountryCode));
            }
            if (Branded != null)
            {
                p.Add(new KeyValuePair<string, string>("Branded", Branded.Value.ToString().ToLower()));
            }
            if (VerifiedCaller != null)
            {
                p.Add(new KeyValuePair<string, string>("VerifiedCaller", VerifiedCaller.Value.ToString().ToLower()));
            }
            if (HasTag != null)
            {
                p.Add(new KeyValuePair<string, string>("HasTag", HasTag.Value.ToString().ToLower()));
            }
            if (StartTime != null)
            {
                p.Add(new KeyValuePair<string, string>("StartTime", StartTime));
            }
            if (EndTime != null)
            {
                p.Add(new KeyValuePair<string, string>("EndTime", EndTime));
            }
            if (CallType != null)
            {
                p.Add(new KeyValuePair<string, string>("CallType", CallType));
            }
            if (CallState != null)
            {
                p.Add(new KeyValuePair<string, string>("CallState", CallState));
            }
            if (Direction != null)
            {
                p.Add(new KeyValuePair<string, string>("Direction", Direction));
            }
            if (ProcessingState != null)
            {
                p.Add(new KeyValuePair<string, string>("ProcessingState", ProcessingState.ToString()));
            }
            if (SortBy != null)
            {
                p.Add(new KeyValuePair<string, string>("SortBy", SortBy.ToString()));
            }
            if (Subaccount != null)
            {
                p.Add(new KeyValuePair<string, string>("Subaccount", Subaccount));
            }
            if (AbnormalSession != null)
            {
                p.Add(new KeyValuePair<string, string>("AbnormalSession", AbnormalSession.Value.ToString().ToLower()));
            }
            if (AnsweredBy != null)
            {
                p.Add(new KeyValuePair<string, string>("AnsweredBy", AnsweredBy.ToString()));
            }
            if (ConnectivityIssues != null)
            {
                p.Add(new KeyValuePair<string, string>("ConnectivityIssues", ConnectivityIssues));
            }
            if (QualityIssues != null)
            {
                p.Add(new KeyValuePair<string, string>("QualityIssues", QualityIssues));
            }
            if (Spam != null)
            {
                p.Add(new KeyValuePair<string, string>("Spam", Spam.Value.ToString().ToLower()));
            }
            if (CallScores != null)
            {
                p.Add(new KeyValuePair<string, string>("CallScores", CallScores));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }
        

    }

}
