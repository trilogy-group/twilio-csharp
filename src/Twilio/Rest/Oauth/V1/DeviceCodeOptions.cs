/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;
using System.Linq;



namespace Kandy.Rest.Oauth.V1
{

    /// <summary> Issues a new Access token (optionally identity_token & refresh_token) in exchange of Oauth grant </summary>
    public class CreateDeviceCodeOptions : IOptions<DeviceCodeResource>
    {
        
        ///<summary> A 34 character string that uniquely identifies this OAuth App. </summary> 
        public string ClientSid { get; }

        ///<summary> An Array of scopes for authorization request </summary> 
        public List<string> Scopes { get; }

        ///<summary> An array of intended audiences for token requests </summary> 
        public List<string> Audiences { get; set; }


        /// <summary> Construct a new CreateDeviceCodeOptions </summary>
        /// <param name="clientSid"> A 34 character string that uniquely identifies this OAuth App. </param>
        /// <param name="scopes"> An Array of scopes for authorization request </param>
        public CreateDeviceCodeOptions(string clientSid, List<string> scopes)
        {
            ClientSid = clientSid;
            Scopes = scopes;
            Audiences = new List<string>();
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public  List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (ClientSid != null)
            {
                p.Add(new KeyValuePair<string, string>("ClientSid", ClientSid));
            }
            if (Scopes != null)
            {
                p.AddRange(Scopes.Select(Scopes => new KeyValuePair<string, string>("Scopes", Scopes)));
            }
            if (Audiences != null)
            {
                p.AddRange(Audiences.Select(Audiences => new KeyValuePair<string, string>("Audiences", Audiences)));
            }
            return p;
        }
        

    }
}
