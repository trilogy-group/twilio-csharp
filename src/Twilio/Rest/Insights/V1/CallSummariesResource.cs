/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Kandy.Rest.Insights.V1
{
    public class CallSummariesResource : Resource
    {

        public sealed class ProcessingStateRequestEnum : StringEnum
        {
            private ProcessingStateRequestEnum(string value) : base(value) { }
            public ProcessingStateRequestEnum() { }
            public static implicit operator ProcessingStateRequestEnum(string value)
            {
                return new ProcessingStateRequestEnum(value);
            }
            public static readonly ProcessingStateRequestEnum Completed = new ProcessingStateRequestEnum("completed");
            public static readonly ProcessingStateRequestEnum Started = new ProcessingStateRequestEnum("started");
            public static readonly ProcessingStateRequestEnum Partial = new ProcessingStateRequestEnum("partial");
            public static readonly ProcessingStateRequestEnum All = new ProcessingStateRequestEnum("all");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class ProcessingStateEnum : StringEnum
        {
            private ProcessingStateEnum(string value) : base(value) { }
            public ProcessingStateEnum() { }
            public static implicit operator ProcessingStateEnum(string value)
            {
                return new ProcessingStateEnum(value);
            }
            public static readonly ProcessingStateEnum Complete = new ProcessingStateEnum("complete");
            public static readonly ProcessingStateEnum Partial = new ProcessingStateEnum("partial");

        }
        public sealed class SortByEnum : StringEnum
        {
            private SortByEnum(string value) : base(value) { }
            public SortByEnum() { }
            public static implicit operator SortByEnum(string value)
            {
                return new SortByEnum(value);
            }
            public static readonly SortByEnum StartTime = new SortByEnum("start_time");
            public static readonly SortByEnum EndTime = new SortByEnum("end_time");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class AnsweredByEnum : StringEnum
        {
            private AnsweredByEnum(string value) : base(value) { }
            public AnsweredByEnum() { }
            public static implicit operator AnsweredByEnum(string value)
            {
                return new AnsweredByEnum(value);
            }
            public static readonly AnsweredByEnum Unknown = new AnsweredByEnum("unknown");
            public static readonly AnsweredByEnum MachineStart = new AnsweredByEnum("machine_start");
            public static readonly AnsweredByEnum MachineEndBeep = new AnsweredByEnum("machine_end_beep");
            public static readonly AnsweredByEnum MachineEndSilence = new AnsweredByEnum("machine_end_silence");
            public static readonly AnsweredByEnum MachineEndOther = new AnsweredByEnum("machine_end_other");
            public static readonly AnsweredByEnum Human = new AnsweredByEnum("human");
            public static readonly AnsweredByEnum Fax = new AnsweredByEnum("fax");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class CallStateEnum : StringEnum
        {
            private CallStateEnum(string value) : base(value) { }
            public CallStateEnum() { }
            public static implicit operator CallStateEnum(string value)
            {
                return new CallStateEnum(value);
            }
            public static readonly CallStateEnum Ringing = new CallStateEnum("ringing");
            public static readonly CallStateEnum Completed = new CallStateEnum("completed");
            public static readonly CallStateEnum Busy = new CallStateEnum("busy");
            public static readonly CallStateEnum Fail = new CallStateEnum("fail");
            public static readonly CallStateEnum Noanswer = new CallStateEnum("noanswer");
            public static readonly CallStateEnum Canceled = new CallStateEnum("canceled");
            public static readonly CallStateEnum Answered = new CallStateEnum("answered");
            public static readonly CallStateEnum Undialed = new CallStateEnum("undialed");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class CallTypeEnum : StringEnum
        {
            private CallTypeEnum(string value) : base(value) { }
            public CallTypeEnum() { }
            public static implicit operator CallTypeEnum(string value)
            {
                return new CallTypeEnum(value);
            }
            public static readonly CallTypeEnum Carrier = new CallTypeEnum("carrier");
            public static readonly CallTypeEnum Sip = new CallTypeEnum("sip");
            public static readonly CallTypeEnum Trunking = new CallTypeEnum("trunking");
            public static readonly CallTypeEnum Client = new CallTypeEnum("client");

        }


        private static Request BuildReadRequest(ReadCallSummariesOptions options, IKandyRestClient client)
        {

            string path = "/v1/Voice/Summaries";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.Insights,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> read </summary>
        /// <param name="options"> Read CallSummaries parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of CallSummaries </returns>
        public static ResourceSet<CallSummariesResource> Read(ReadCallSummariesOptions options, IKandyRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<CallSummariesResource>.FromJson("call_summaries", response.Content);
            return new ResourceSet<CallSummariesResource>(page, options, client);
        }

#if !NET35
        /// <summary> read </summary>
        /// <param name="options"> Read CallSummaries parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of CallSummaries </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<CallSummariesResource>> ReadAsync(ReadCallSummariesOptions options,
                                                                                             IKandyRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<CallSummariesResource>.FromJson("call_summaries", response.Content);
            return new ResourceSet<CallSummariesResource>(page, options, client);
        }
#endif
        /// <summary> read </summary>
        /// <param name="from">  </param>
        /// <param name="to">  </param>
        /// <param name="fromCarrier">  </param>
        /// <param name="toCarrier">  </param>
        /// <param name="fromCountryCode">  </param>
        /// <param name="toCountryCode">  </param>
        /// <param name="branded">  </param>
        /// <param name="verifiedCaller">  </param>
        /// <param name="hasTag">  </param>
        /// <param name="startTime">  </param>
        /// <param name="endTime">  </param>
        /// <param name="callType">  </param>
        /// <param name="callState">  </param>
        /// <param name="direction">  </param>
        /// <param name="processingState">  </param>
        /// <param name="sortBy">  </param>
        /// <param name="subaccount">  </param>
        /// <param name="abnormalSession">  </param>
        /// <param name="answeredBy">  </param>
        /// <param name="connectivityIssues">  </param>
        /// <param name="qualityIssues">  </param>
        /// <param name="spam">  </param>
        /// <param name="callScores">  </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of CallSummaries </returns>
        public static ResourceSet<CallSummariesResource> Read(
                                                     string from = null,
                                                     string to = null,
                                                     string fromCarrier = null,
                                                     string toCarrier = null,
                                                     string fromCountryCode = null,
                                                     string toCountryCode = null,
                                                     bool? branded = null,
                                                     bool? verifiedCaller = null,
                                                     bool? hasTag = null,
                                                     string startTime = null,
                                                     string endTime = null,
                                                     string callType = null,
                                                     string callState = null,
                                                     string direction = null,
                                                     CallSummariesResource.ProcessingStateRequestEnum processingState = null,
                                                     CallSummariesResource.SortByEnum sortBy = null,
                                                     string subaccount = null,
                                                     bool? abnormalSession = null,
                                                     CallSummariesResource.AnsweredByEnum answeredBy = null,
                                                     string connectivityIssues = null,
                                                     string qualityIssues = null,
                                                     bool? spam = null,
                                                     string callScores = null,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                     IKandyRestClient client = null)
        {
            var options = new ReadCallSummariesOptions() { From = from, To = to, FromCarrier = fromCarrier, ToCarrier = toCarrier, FromCountryCode = fromCountryCode, ToCountryCode = toCountryCode, Branded = branded, VerifiedCaller = verifiedCaller, HasTag = hasTag, StartTime = startTime, EndTime = endTime, CallType = callType, CallState = callState, Direction = direction, ProcessingState = processingState, SortBy = sortBy, Subaccount = subaccount, AbnormalSession = abnormalSession, AnsweredBy = answeredBy, ConnectivityIssues = connectivityIssues, QualityIssues = qualityIssues, Spam = spam, CallScores = callScores, PageSize = pageSize, Limit = limit };
            return Read(options, client);
        }

#if !NET35
        /// <summary> read </summary>
        /// <param name="from">  </param>
        /// <param name="to">  </param>
        /// <param name="fromCarrier">  </param>
        /// <param name="toCarrier">  </param>
        /// <param name="fromCountryCode">  </param>
        /// <param name="toCountryCode">  </param>
        /// <param name="branded">  </param>
        /// <param name="verifiedCaller">  </param>
        /// <param name="hasTag">  </param>
        /// <param name="startTime">  </param>
        /// <param name="endTime">  </param>
        /// <param name="callType">  </param>
        /// <param name="callState">  </param>
        /// <param name="direction">  </param>
        /// <param name="processingState">  </param>
        /// <param name="sortBy">  </param>
        /// <param name="subaccount">  </param>
        /// <param name="abnormalSession">  </param>
        /// <param name="answeredBy">  </param>
        /// <param name="connectivityIssues">  </param>
        /// <param name="qualityIssues">  </param>
        /// <param name="spam">  </param>
        /// <param name="callScores">  </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of CallSummaries </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<CallSummariesResource>> ReadAsync(
                                                                                             string from = null,
                                                                                             string to = null,
                                                                                             string fromCarrier = null,
                                                                                             string toCarrier = null,
                                                                                             string fromCountryCode = null,
                                                                                             string toCountryCode = null,
                                                                                             bool? branded = null,
                                                                                             bool? verifiedCaller = null,
                                                                                             bool? hasTag = null,
                                                                                             string startTime = null,
                                                                                             string endTime = null,
                                                                                             string callType = null,
                                                                                             string callState = null,
                                                                                             string direction = null,
                                                                                             CallSummariesResource.ProcessingStateRequestEnum processingState = null,
                                                                                             CallSummariesResource.SortByEnum sortBy = null,
                                                                                             string subaccount = null,
                                                                                             bool? abnormalSession = null,
                                                                                             CallSummariesResource.AnsweredByEnum answeredBy = null,
                                                                                             string connectivityIssues = null,
                                                                                             string qualityIssues = null,
                                                                                             bool? spam = null,
                                                                                             string callScores = null,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                             IKandyRestClient client = null)
        {
            var options = new ReadCallSummariesOptions() { From = from, To = to, FromCarrier = fromCarrier, ToCarrier = toCarrier, FromCountryCode = fromCountryCode, ToCountryCode = toCountryCode, Branded = branded, VerifiedCaller = verifiedCaller, HasTag = hasTag, StartTime = startTime, EndTime = endTime, CallType = callType, CallState = callState, Direction = direction, ProcessingState = processingState, SortBy = sortBy, Subaccount = subaccount, AbnormalSession = abnormalSession, AnsweredBy = answeredBy, ConnectivityIssues = connectivityIssues, QualityIssues = qualityIssues, Spam = spam, CallScores = callScores, PageSize = pageSize, Limit = limit };
            return await ReadAsync(options, client);
        }
#endif


        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<CallSummariesResource> GetPage(string targetUrl, IKandyRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<CallSummariesResource>.FromJson("call_summaries", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<CallSummariesResource> NextPage(Page<CallSummariesResource> page, IKandyRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<CallSummariesResource>.FromJson("call_summaries", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<CallSummariesResource> PreviousPage(Page<CallSummariesResource> page, IKandyRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<CallSummariesResource>.FromJson("call_summaries", response.Content);
        }


        /// <summary>
        /// Converts a JSON string into a CallSummariesResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> CallSummariesResource object represented by the provided JSON </returns>
        public static CallSummariesResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<CallSummariesResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }


        ///<summary> The account_sid </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The call_sid </summary> 
        [JsonProperty("call_sid")]
        public string CallSid { get; private set; }


        [JsonProperty("answered_by")]
        public CallSummariesResource.AnsweredByEnum AnsweredBy { get; private set; }


        [JsonProperty("call_type")]
        public CallSummariesResource.CallTypeEnum CallType { get; private set; }


        [JsonProperty("call_state")]
        public CallSummariesResource.CallStateEnum CallState { get; private set; }


        [JsonProperty("processing_state")]
        public CallSummariesResource.ProcessingStateEnum ProcessingState { get; private set; }

        ///<summary> The created_time </summary> 
        [JsonProperty("created_time")]
        public DateTime? CreatedTime { get; private set; }

        ///<summary> The start_time </summary> 
        [JsonProperty("start_time")]
        public DateTime? StartTime { get; private set; }

        ///<summary> The end_time </summary> 
        [JsonProperty("end_time")]
        public DateTime? EndTime { get; private set; }

        ///<summary> The duration </summary> 
        [JsonProperty("duration")]
        public int? Duration { get; private set; }

        ///<summary> The connect_duration </summary> 
        [JsonProperty("connect_duration")]
        public int? ConnectDuration { get; private set; }

        ///<summary> The from </summary> 
        [JsonProperty("from")]
        public object From { get; private set; }

        ///<summary> The to </summary> 
        [JsonProperty("to")]
        public object To { get; private set; }

        ///<summary> The carrier_edge </summary> 
        [JsonProperty("carrier_edge")]
        public object CarrierEdge { get; private set; }

        ///<summary> The client_edge </summary> 
        [JsonProperty("client_edge")]
        public object ClientEdge { get; private set; }

        ///<summary> The sdk_edge </summary> 
        [JsonProperty("sdk_edge")]
        public object SdkEdge { get; private set; }

        ///<summary> The sip_edge </summary> 
        [JsonProperty("sip_edge")]
        public object SipEdge { get; private set; }

        ///<summary> The tags </summary> 
        [JsonProperty("tags")]
        public List<string> Tags { get; private set; }

        ///<summary> The url </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        ///<summary> The attributes </summary> 
        [JsonProperty("attributes")]
        public object Attributes { get; private set; }

        ///<summary> The properties </summary> 
        [JsonProperty("properties")]
        public object Properties { get; private set; }

        ///<summary> The trust </summary> 
        [JsonProperty("trust")]
        public object Trust { get; private set; }



        private CallSummariesResource()
        {

        }
    }
}
