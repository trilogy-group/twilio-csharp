/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Kandy - Api
 * This is the public Kandy REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Kandy.Base;
using Kandy.Clients;
using Kandy.Converters;
using Kandy.Exceptions;
using Kandy.Http;
using Kandy.Types;


namespace Kandy.Rest.Api.V2010.Account
{
    public class MessageResource : Resource
    {

        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class StatusEnum : StringEnum
        {
            private StatusEnum(string value) : base(value) { }
            public StatusEnum() { }
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }
            public static readonly StatusEnum Queued = new StatusEnum("queued");
            public static readonly StatusEnum Sending = new StatusEnum("sending");
            public static readonly StatusEnum Sent = new StatusEnum("sent");
            public static readonly StatusEnum Failed = new StatusEnum("failed");
            public static readonly StatusEnum Delivered = new StatusEnum("delivered");
            public static readonly StatusEnum Undelivered = new StatusEnum("undelivered");
            public static readonly StatusEnum Receiving = new StatusEnum("receiving");
            public static readonly StatusEnum Received = new StatusEnum("received");
            public static readonly StatusEnum Accepted = new StatusEnum("accepted");
            public static readonly StatusEnum Scheduled = new StatusEnum("scheduled");
            public static readonly StatusEnum Read = new StatusEnum("read");
            public static readonly StatusEnum PartiallyDelivered = new StatusEnum("partially_delivered");
            public static readonly StatusEnum Canceled = new StatusEnum("canceled");

        }
        public sealed class ContentRetentionEnum : StringEnum
        {
            private ContentRetentionEnum(string value) : base(value) { }
            public ContentRetentionEnum() { }
            public static implicit operator ContentRetentionEnum(string value)
            {
                return new ContentRetentionEnum(value);
            }
            public static readonly ContentRetentionEnum Retain = new ContentRetentionEnum("retain");

        }
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class DirectionEnum : StringEnum
        {
            private DirectionEnum(string value) : base(value) { }
            public DirectionEnum() { }
            public static implicit operator DirectionEnum(string value)
            {
                return new DirectionEnum(value);
            }
            public static readonly DirectionEnum Inbound = new DirectionEnum("inbound");
            public static readonly DirectionEnum OutboundApi = new DirectionEnum("outbound-api");
            public static readonly DirectionEnum OutboundCall = new DirectionEnum("outbound-call");
            public static readonly DirectionEnum OutboundReply = new DirectionEnum("outbound-reply");

        }
        public sealed class ScheduleTypeEnum : StringEnum
        {
            private ScheduleTypeEnum(string value) : base(value) { }
            public ScheduleTypeEnum() { }
            public static implicit operator ScheduleTypeEnum(string value)
            {
                return new ScheduleTypeEnum(value);
            }
            public static readonly ScheduleTypeEnum Fixed = new ScheduleTypeEnum("fixed");

        }
        public sealed class AddressRetentionEnum : StringEnum
        {
            private AddressRetentionEnum(string value) : base(value) { }
            public AddressRetentionEnum() { }
            public static implicit operator AddressRetentionEnum(string value)
            {
                return new AddressRetentionEnum(value);
            }
            public static readonly AddressRetentionEnum Retain = new AddressRetentionEnum("retain");

        }
        public sealed class UpdateStatusEnum : StringEnum
        {
            private UpdateStatusEnum(string value) : base(value) { }
            public UpdateStatusEnum() { }
            public static implicit operator UpdateStatusEnum(string value)
            {
                return new UpdateStatusEnum(value);
            }
            public static readonly UpdateStatusEnum Canceled = new UpdateStatusEnum("canceled");

        }


        private static Request BuildCreateRequest(CreateMessageOptions options, IKandyRestClient client)
        {

            string path = "/2010-04-01/Accounts/{AccountSid}/Messages.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{" + "AccountSid" + "}", PathAccountSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Api,
                path,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Send a message from the account used to make the request </summary>
        /// <param name="options"> Create Message parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of Message </returns>
        public static MessageResource Create(CreateMessageOptions options, IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

#if !NET35
        /// <summary> Send a message from the account used to make the request </summary>
        /// <param name="options"> Create Message parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of Message </returns>
        public static async System.Threading.Tasks.Task<MessageResource> CreateAsync(CreateMessageOptions options,
        IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
#endif

        /// <summary> Send a message from the account used to make the request </summary>
        /// <param name="to"> The destination phone number in [E.164](https://www.kandy.com/docs/glossary/what-e164) format for SMS/MMS or [Channel user address](https://www.kandy.com/docs/sms/channels#channel-addresses) for other 3rd-party channels. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.kandy.com/docs/iam/api/account) that will create the resource. </param>
        /// <param name="from"> A Kandy phone number in [E.164](https://www.kandy.com/docs/glossary/what-e164) format, an [alphanumeric sender ID](https://www.kandy.com/docs/sms/send-messages#use-an-alphanumeric-sender-id), or a [Channel Endpoint address](https://www.kandy.com/docs/sms/channels#channel-addresses) that is enabled for the type of message you want to send. Phone numbers or [short codes](https://www.kandy.com/docs/sms/api/short-code) purchased from Kandy also work here. You cannot, for example, spoof messages from a private cell phone number. If you are using `messaging_service_sid`, this parameter must be empty. </param>
        /// <param name="messagingServiceSid"> The SID of the [Messaging Service](https://www.kandy.com/docs/sms/services#send-a-message-with-copilot) you want to associate with the Message. Set this parameter to use the [Messaging Service Settings and Copilot Features](https://www.kandy.com/console/sms/services) you have configured and leave the `from` parameter empty. When only this parameter is set, Kandy will use your enabled Copilot Features to select the `from` phone number for delivery. </param>
        /// <param name="body"> The text of the message you want to send. Can be up to 1,600 characters in length. </param>
        /// <param name="mediaUrl"> The URL of the media to send with the message. The media can be of type `gif`, `png`, and `jpeg` and will be formatted correctly on the recipient's device. The media size limit is 5MB for supported file types (JPEG, PNG, GIF) and 500KB for [other types](https://www.kandy.com/docs/sms/accepted-mime-types) of accepted media. To send more than one image in the message body, provide multiple `media_url` parameters in the POST request. You can include up to 10 `media_url` parameters per message. You can send images in an SMS message in only the US and Canada. </param>
        /// <param name="statusCallback"> The URL we should call using the `status_callback_method` to send status information to your application. If specified, we POST these message status changes to the URL: `queued`, `failed`, `sent`, `delivered`, or `undelivered`. Kandy will POST its [standard request parameters](https://www.kandy.com/docs/sms/twiml#request-parameters) as well as some additional parameters including `MessageSid`, `MessageStatus`, and `ErrorCode`. If you include this parameter with the `messaging_service_sid`, we use this URL instead of the Status Callback URL of the [Messaging Service](https://www.kandy.com/docs/sms/services/api). URLs must contain a valid hostname and underscores are not allowed. </param>
        /// <param name="applicationSid"> The SID of the application that should receive message status. We POST a `message_sid` parameter and a `message_status` parameter with a value of `sent` or `failed` to the [application](https://www.kandy.com/docs/usage/api/applications)'s `message_status_callback`. If a `status_callback` parameter is also passed, it will be ignored and the application's `message_status_callback` parameter will be used. </param>
        /// <param name="maxPrice"> The maximum total price in US dollars that you will pay for the message to be delivered. Can be a decimal value that has up to 4 decimal places. All messages are queued for delivery and the message cost is checked before the message is sent. If the cost exceeds `max_price`, the message will fail and a status of `Failed` is sent to the status callback. If `MaxPrice` is not set, the message cost is not checked. </param>
        /// <param name="provideFeedback"> Whether to confirm delivery of the message. Set this value to `true` if you are sending messages that have a trackable user action and you intend to confirm delivery of the message using the [Message Feedback API](https://www.kandy.com/docs/sms/api/message-feedback-resource). This parameter is `false` by default. </param>
        /// <param name="attempt"> Total number of attempts made ( including this ) to send out the message regardless of the provider used </param>
        /// <param name="validityPeriod"> How long in seconds the message can remain in our outgoing message queue. After this period elapses, the message fails and we call your status callback. Can be between 1 and the default value of 14,400 seconds. After a message has been accepted by a carrier, however, we cannot guarantee that the message will not be queued after this period. We recommend that this value be at least 5 seconds. </param>
        /// <param name="forceDelivery"> Reserved </param>
        /// <param name="contentRetention">  </param>
        /// <param name="addressRetention">  </param>
        /// <param name="smartEncoded"> Whether to detect Unicode characters that have a similar GSM-7 character and replace them. Can be: `true` or `false`. </param>
        /// <param name="persistentAction"> Rich actions for Channels Messages. </param>
        /// <param name="shortenUrls"> Determines the usage of Click Tracking. Setting it to `true` will instruct Kandy to replace all links in the Message with a shortened version based on the associated Domain Sid and track clicks on them. If this parameter is not set on an API call, we will use the value set on the Messaging Service. If this parameter is not set and the value is not configured on the Messaging Service used this will default to `false`. </param>
        /// <param name="scheduleType">  </param>
        /// <param name="sendAt"> The time that Kandy will send the message. Must be in ISO 8601 format. </param>
        /// <param name="sendAsMms"> If set to True, Kandy will deliver the message as a single MMS message, regardless of the presence of media. </param>
        /// <param name="contentSid"> The SID of the Content object returned at Content API content create time (https://www.kandy.com/docs/content-api/create-and-send-your-first-content-api-template#create-a-template). If this parameter is not specified, then the Content API will not be utilized. </param>
        /// <param name="contentVariables"> Key-value pairs of variable names to substitution values, used alongside a content_sid. If not specified, Content API will default to the default variables defined at create time. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of Message </returns>
        public static MessageResource Create(
                                          Types.PhoneNumber to,
                                          string pathAccountSid = null,
                                          Types.PhoneNumber from = null,
                                          string messagingServiceSid = null,
                                          string body = null,
                                          List<Uri> mediaUrl = null,
                                          Uri statusCallback = null,
                                          string applicationSid = null,
                                          decimal? maxPrice = null,
                                          bool? provideFeedback = null,
                                          int? attempt = null,
                                          int? validityPeriod = null,
                                          bool? forceDelivery = null,
                                          MessageResource.ContentRetentionEnum contentRetention = null,
                                          MessageResource.AddressRetentionEnum addressRetention = null,
                                          bool? smartEncoded = null,
                                          List<string> persistentAction = null,
                                          bool? shortenUrls = null,
                                          MessageResource.ScheduleTypeEnum scheduleType = null,
                                          DateTime? sendAt = null,
                                          bool? sendAsMms = null,
                                          string contentSid = null,
                                          string contentVariables = null,
                                          IKandyRestClient client = null)
        {
            var options = new CreateMessageOptions(to) { PathAccountSid = pathAccountSid, From = from, MessagingServiceSid = messagingServiceSid, Body = body, MediaUrl = mediaUrl, StatusCallback = statusCallback, ApplicationSid = applicationSid, MaxPrice = maxPrice, ProvideFeedback = provideFeedback, Attempt = attempt, ValidityPeriod = validityPeriod, ForceDelivery = forceDelivery, ContentRetention = contentRetention, AddressRetention = addressRetention, SmartEncoded = smartEncoded, PersistentAction = persistentAction, ShortenUrls = shortenUrls, ScheduleType = scheduleType, SendAt = sendAt, SendAsMms = sendAsMms, ContentSid = contentSid, ContentVariables = contentVariables };
            return Create(options, client);
        }

#if !NET35
        /// <summary> Send a message from the account used to make the request </summary>
        /// <param name="to"> The destination phone number in [E.164](https://www.kandy.com/docs/glossary/what-e164) format for SMS/MMS or [Channel user address](https://www.kandy.com/docs/sms/channels#channel-addresses) for other 3rd-party channels. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.kandy.com/docs/iam/api/account) that will create the resource. </param>
        /// <param name="from"> A Kandy phone number in [E.164](https://www.kandy.com/docs/glossary/what-e164) format, an [alphanumeric sender ID](https://www.kandy.com/docs/sms/send-messages#use-an-alphanumeric-sender-id), or a [Channel Endpoint address](https://www.kandy.com/docs/sms/channels#channel-addresses) that is enabled for the type of message you want to send. Phone numbers or [short codes](https://www.kandy.com/docs/sms/api/short-code) purchased from Kandy also work here. You cannot, for example, spoof messages from a private cell phone number. If you are using `messaging_service_sid`, this parameter must be empty. </param>
        /// <param name="messagingServiceSid"> The SID of the [Messaging Service](https://www.kandy.com/docs/sms/services#send-a-message-with-copilot) you want to associate with the Message. Set this parameter to use the [Messaging Service Settings and Copilot Features](https://www.kandy.com/console/sms/services) you have configured and leave the `from` parameter empty. When only this parameter is set, Kandy will use your enabled Copilot Features to select the `from` phone number for delivery. </param>
        /// <param name="body"> The text of the message you want to send. Can be up to 1,600 characters in length. </param>
        /// <param name="mediaUrl"> The URL of the media to send with the message. The media can be of type `gif`, `png`, and `jpeg` and will be formatted correctly on the recipient's device. The media size limit is 5MB for supported file types (JPEG, PNG, GIF) and 500KB for [other types](https://www.kandy.com/docs/sms/accepted-mime-types) of accepted media. To send more than one image in the message body, provide multiple `media_url` parameters in the POST request. You can include up to 10 `media_url` parameters per message. You can send images in an SMS message in only the US and Canada. </param>
        /// <param name="statusCallback"> The URL we should call using the `status_callback_method` to send status information to your application. If specified, we POST these message status changes to the URL: `queued`, `failed`, `sent`, `delivered`, or `undelivered`. Kandy will POST its [standard request parameters](https://www.kandy.com/docs/sms/twiml#request-parameters) as well as some additional parameters including `MessageSid`, `MessageStatus`, and `ErrorCode`. If you include this parameter with the `messaging_service_sid`, we use this URL instead of the Status Callback URL of the [Messaging Service](https://www.kandy.com/docs/sms/services/api). URLs must contain a valid hostname and underscores are not allowed. </param>
        /// <param name="applicationSid"> The SID of the application that should receive message status. We POST a `message_sid` parameter and a `message_status` parameter with a value of `sent` or `failed` to the [application](https://www.kandy.com/docs/usage/api/applications)'s `message_status_callback`. If a `status_callback` parameter is also passed, it will be ignored and the application's `message_status_callback` parameter will be used. </param>
        /// <param name="maxPrice"> The maximum total price in US dollars that you will pay for the message to be delivered. Can be a decimal value that has up to 4 decimal places. All messages are queued for delivery and the message cost is checked before the message is sent. If the cost exceeds `max_price`, the message will fail and a status of `Failed` is sent to the status callback. If `MaxPrice` is not set, the message cost is not checked. </param>
        /// <param name="provideFeedback"> Whether to confirm delivery of the message. Set this value to `true` if you are sending messages that have a trackable user action and you intend to confirm delivery of the message using the [Message Feedback API](https://www.kandy.com/docs/sms/api/message-feedback-resource). This parameter is `false` by default. </param>
        /// <param name="attempt"> Total number of attempts made ( including this ) to send out the message regardless of the provider used </param>
        /// <param name="validityPeriod"> How long in seconds the message can remain in our outgoing message queue. After this period elapses, the message fails and we call your status callback. Can be between 1 and the default value of 14,400 seconds. After a message has been accepted by a carrier, however, we cannot guarantee that the message will not be queued after this period. We recommend that this value be at least 5 seconds. </param>
        /// <param name="forceDelivery"> Reserved </param>
        /// <param name="contentRetention">  </param>
        /// <param name="addressRetention">  </param>
        /// <param name="smartEncoded"> Whether to detect Unicode characters that have a similar GSM-7 character and replace them. Can be: `true` or `false`. </param>
        /// <param name="persistentAction"> Rich actions for Channels Messages. </param>
        /// <param name="shortenUrls"> Determines the usage of Click Tracking. Setting it to `true` will instruct Kandy to replace all links in the Message with a shortened version based on the associated Domain Sid and track clicks on them. If this parameter is not set on an API call, we will use the value set on the Messaging Service. If this parameter is not set and the value is not configured on the Messaging Service used this will default to `false`. </param>
        /// <param name="scheduleType">  </param>
        /// <param name="sendAt"> The time that Kandy will send the message. Must be in ISO 8601 format. </param>
        /// <param name="sendAsMms"> If set to True, Kandy will deliver the message as a single MMS message, regardless of the presence of media. </param>
        /// <param name="contentSid"> The SID of the Content object returned at Content API content create time (https://www.kandy.com/docs/content-api/create-and-send-your-first-content-api-template#create-a-template). If this parameter is not specified, then the Content API will not be utilized. </param>
        /// <param name="contentVariables"> Key-value pairs of variable names to substitution values, used alongside a content_sid. If not specified, Content API will default to the default variables defined at create time. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of Message </returns>
        public static async System.Threading.Tasks.Task<MessageResource> CreateAsync(
                                                                                  Types.PhoneNumber to,
                                                                                  string pathAccountSid = null,
                                                                                  Types.PhoneNumber from = null,
                                                                                  string messagingServiceSid = null,
                                                                                  string body = null,
                                                                                  List<Uri> mediaUrl = null,
                                                                                  Uri statusCallback = null,
                                                                                  string applicationSid = null,
                                                                                  decimal? maxPrice = null,
                                                                                  bool? provideFeedback = null,
                                                                                  int? attempt = null,
                                                                                  int? validityPeriod = null,
                                                                                  bool? forceDelivery = null,
                                                                                  MessageResource.ContentRetentionEnum contentRetention = null,
                                                                                  MessageResource.AddressRetentionEnum addressRetention = null,
                                                                                  bool? smartEncoded = null,
                                                                                  List<string> persistentAction = null,
                                                                                  bool? shortenUrls = null,
                                                                                  MessageResource.ScheduleTypeEnum scheduleType = null,
                                                                                  DateTime? sendAt = null,
                                                                                  bool? sendAsMms = null,
                                                                                  string contentSid = null,
                                                                                  string contentVariables = null,
                                                                                  IKandyRestClient client = null)
        {
            var options = new CreateMessageOptions(to) { PathAccountSid = pathAccountSid, From = from, MessagingServiceSid = messagingServiceSid, Body = body, MediaUrl = mediaUrl, StatusCallback = statusCallback, ApplicationSid = applicationSid, MaxPrice = maxPrice, ProvideFeedback = provideFeedback, Attempt = attempt, ValidityPeriod = validityPeriod, ForceDelivery = forceDelivery, ContentRetention = contentRetention, AddressRetention = addressRetention, SmartEncoded = smartEncoded, PersistentAction = persistentAction, ShortenUrls = shortenUrls, ScheduleType = scheduleType, SendAt = sendAt, SendAsMms = sendAsMms, ContentSid = contentSid, ContentVariables = contentVariables };
            return await CreateAsync(options, client);
        }
#endif

        /// <summary> Deletes a message record from your account </summary>
        /// <param name="options"> Delete Message parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of Message </returns>
        private static Request BuildDeleteRequest(DeleteMessageOptions options, IKandyRestClient client)
        {

            string path = "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{" + "AccountSid" + "}", PathAccountSid);
            string PathSid = options.PathSid;
            path = path.Replace("{" + "Sid" + "}", PathSid);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Deletes a message record from your account </summary>
        /// <param name="options"> Delete Message parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of Message </returns>
        public static bool Delete(DeleteMessageOptions options, IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

#if !NET35
        /// <summary> Deletes a message record from your account </summary>
        /// <param name="options"> Delete Message parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of Message </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteMessageOptions options,
                                                                          IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
#endif

        /// <summary> Deletes a message record from your account </summary>
        /// <param name="pathSid"> The Kandy-provided string that uniquely identifies the Message resource to delete. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.kandy.com/docs/iam/api/account) that created the Message resources to delete. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of Message </returns>
        public static bool Delete(string pathSid, string pathAccountSid = null, IKandyRestClient client = null)
        {
            var options = new DeleteMessageOptions(pathSid) { PathAccountSid = pathAccountSid };
            return Delete(options, client);
        }

#if !NET35
        /// <summary> Deletes a message record from your account </summary>
        /// <param name="pathSid"> The Kandy-provided string that uniquely identifies the Message resource to delete. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.kandy.com/docs/iam/api/account) that created the Message resources to delete. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of Message </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathSid, string pathAccountSid = null, IKandyRestClient client = null)
        {
            var options = new DeleteMessageOptions(pathSid) { PathAccountSid = pathAccountSid };
            return await DeleteAsync(options, client);
        }
#endif

        private static Request BuildFetchRequest(FetchMessageOptions options, IKandyRestClient client)
        {

            string path = "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{" + "AccountSid" + "}", PathAccountSid);
            string PathSid = options.PathSid;
            path = path.Replace("{" + "Sid" + "}", PathSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Fetch a message belonging to the account used to make the request </summary>
        /// <param name="options"> Fetch Message parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of Message </returns>
        public static MessageResource Fetch(FetchMessageOptions options, IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

#if !NET35
        /// <summary> Fetch a message belonging to the account used to make the request </summary>
        /// <param name="options"> Fetch Message parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of Message </returns>
        public static async System.Threading.Tasks.Task<MessageResource> FetchAsync(FetchMessageOptions options,
                                                                                             IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
#endif
        /// <summary> Fetch a message belonging to the account used to make the request </summary>
        /// <param name="pathSid"> The Kandy-provided string that uniquely identifies the Message resource to fetch. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.kandy.com/docs/iam/api/account) that created the Message resource to fetch. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of Message </returns>
        public static MessageResource Fetch(
                                         string pathSid,
                                         string pathAccountSid = null,
                                         IKandyRestClient client = null)
        {
            var options = new FetchMessageOptions(pathSid) { PathAccountSid = pathAccountSid };
            return Fetch(options, client);
        }

#if !NET35
        /// <summary> Fetch a message belonging to the account used to make the request </summary>
        /// <param name="pathSid"> The Kandy-provided string that uniquely identifies the Message resource to fetch. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.kandy.com/docs/iam/api/account) that created the Message resource to fetch. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of Message </returns>
        public static async System.Threading.Tasks.Task<MessageResource> FetchAsync(string pathSid, string pathAccountSid = null, IKandyRestClient client = null)
        {
            var options = new FetchMessageOptions(pathSid) { PathAccountSid = pathAccountSid };
            return await FetchAsync(options, client);
        }
#endif

        private static Request BuildReadRequest(ReadMessageOptions options, IKandyRestClient client)
        {

            string path = "/2010-04-01/Accounts/{AccountSid}/Messages.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{" + "AccountSid" + "}", PathAccountSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> Retrieve a list of messages belonging to the account used to make the request </summary>
        /// <param name="options"> Read Message parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of Message </returns>
        public static ResourceSet<MessageResource> Read(ReadMessageOptions options, IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<MessageResource>.FromJson("messages", response.Content);
            return new ResourceSet<MessageResource>(page, options, client);
        }

#if !NET35
        /// <summary> Retrieve a list of messages belonging to the account used to make the request </summary>
        /// <param name="options"> Read Message parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of Message </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<MessageResource>> ReadAsync(ReadMessageOptions options,
                                                                                             IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<MessageResource>.FromJson("messages", response.Content);
            return new ResourceSet<MessageResource>(page, options, client);
        }
#endif
        /// <summary> Retrieve a list of messages belonging to the account used to make the request </summary>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.kandy.com/docs/iam/api/account) that created the Message resources to read. </param>
        /// <param name="to"> Read messages sent to only this phone number. </param>
        /// <param name="from"> Read messages sent from only this phone number or alphanumeric sender ID. </param>
        /// <param name="dateSentBefore"> The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date. </param>
        /// <param name="dateSent"> The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date. </param>
        /// <param name="dateSentAfter"> The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of Message </returns>
        public static ResourceSet<MessageResource> Read(
                                                     string pathAccountSid = null,
                                                     Types.PhoneNumber to = null,
                                                     Types.PhoneNumber from = null,
                                                     DateTime? dateSentBefore = null,
                                                     DateTime? dateSent = null,
                                                     DateTime? dateSentAfter = null,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                     IKandyRestClient client = null)
        {
            var options = new ReadMessageOptions() { PathAccountSid = pathAccountSid, To = to, From = from, DateSentBefore = dateSentBefore, DateSent = dateSent, DateSentAfter = dateSentAfter, PageSize = pageSize, Limit = limit };
            return Read(options, client);
        }

#if !NET35
        /// <summary> Retrieve a list of messages belonging to the account used to make the request </summary>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.kandy.com/docs/iam/api/account) that created the Message resources to read. </param>
        /// <param name="to"> Read messages sent to only this phone number. </param>
        /// <param name="from"> Read messages sent from only this phone number or alphanumeric sender ID. </param>
        /// <param name="dateSentBefore"> The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date. </param>
        /// <param name="dateSent"> The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date. </param>
        /// <param name="dateSentAfter"> The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date. </param>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of Message </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<MessageResource>> ReadAsync(
                                                                                             string pathAccountSid = null,
                                                                                             Types.PhoneNumber to = null,
                                                                                             Types.PhoneNumber from = null,
                                                                                             DateTime? dateSentBefore = null,
                                                                                             DateTime? dateSent = null,
                                                                                             DateTime? dateSentAfter = null,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                             IKandyRestClient client = null)
        {
            var options = new ReadMessageOptions() { PathAccountSid = pathAccountSid, To = to, From = from, DateSentBefore = dateSentBefore, DateSent = dateSent, DateSentAfter = dateSentAfter, PageSize = pageSize, Limit = limit };
            return await ReadAsync(options, client);
        }
#endif


        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> The target page of records </returns>
        public static Page<MessageResource> GetPage(string targetUrl, IKandyRestClient client)
        {
            client = client ?? KandyClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<MessageResource>.FromJson("messages", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> The next page of records </returns>
        public static Page<MessageResource> NextPage(Page<MessageResource> page, IKandyRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<MessageResource>.FromJson("messages", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> The previous page of records </returns>
        public static Page<MessageResource> PreviousPage(Page<MessageResource> page, IKandyRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<MessageResource>.FromJson("messages", response.Content);
        }


        private static Request BuildUpdateRequest(UpdateMessageOptions options, IKandyRestClient client)
        {

            string path = "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json";

            string PathAccountSid = options.PathAccountSid ?? client.AccountSid;
            path = path.Replace("{" + "AccountSid" + "}", PathAccountSid);
            string PathSid = options.PathSid;
            path = path.Replace("{" + "Sid" + "}", PathSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Api,
                path,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> To redact a message-body from a post-flight message record, post to the message instance resource with an empty body </summary>
        /// <param name="options"> Update Message parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of Message </returns>
        public static MessageResource Update(UpdateMessageOptions options, IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> To redact a message-body from a post-flight message record, post to the message instance resource with an empty body </summary>
        /// <param name="options"> Update Message parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of Message </returns>
#if !NET35
        public static async System.Threading.Tasks.Task<MessageResource> UpdateAsync(UpdateMessageOptions options,
                                                                                                          IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
#endif

        /// <summary> To redact a message-body from a post-flight message record, post to the message instance resource with an empty body </summary>
        /// <param name="pathSid"> The Kandy-provided string that uniquely identifies the Message resource to update. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.kandy.com/docs/iam/api/account) that created the Message resources to update. </param>
        /// <param name="body"> The text of the message you want to send. Can be up to 1,600 characters long. </param>
        /// <param name="status">  </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of Message </returns>
        public static MessageResource Update(
                                          string pathSid,
                                          string pathAccountSid = null,
                                          string body = null,
                                          MessageResource.UpdateStatusEnum status = null,
                                          IKandyRestClient client = null)
        {
            var options = new UpdateMessageOptions(pathSid) { PathAccountSid = pathAccountSid, Body = body, Status = status };
            return Update(options, client);
        }

#if !NET35
        /// <summary> To redact a message-body from a post-flight message record, post to the message instance resource with an empty body </summary>
        /// <param name="pathSid"> The Kandy-provided string that uniquely identifies the Message resource to update. </param>
        /// <param name="pathAccountSid"> The SID of the [Account](https://www.kandy.com/docs/iam/api/account) that created the Message resources to update. </param>
        /// <param name="body"> The text of the message you want to send. Can be up to 1,600 characters long. </param>
        /// <param name="status">  </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of Message </returns>
        public static async System.Threading.Tasks.Task<MessageResource> UpdateAsync(
                                                                              string pathSid,
                                                                              string pathAccountSid = null,
                                                                              string body = null,
                                                                              MessageResource.UpdateStatusEnum status = null,
                                                                              IKandyRestClient client = null)
        {
            var options = new UpdateMessageOptions(pathSid) { PathAccountSid = pathAccountSid, Body = body, Status = status };
            return await UpdateAsync(options, client);
        }
#endif

        /// <summary>
        /// Converts a JSON string into a MessageResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> MessageResource object represented by the provided JSON </returns>
        public static MessageResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<MessageResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }


        ///<summary> The message text. Can be up to 1,600 characters long. </summary> 
        [JsonProperty("body")]
        public string Body { get; private set; }

        ///<summary> The number of segments that make up the complete message. A message body that is too large to be sent in a single SMS message is segmented and charged as multiple messages. Inbound messages over 160 characters are reassembled when the message is received. Note: When using a Messaging Service to send messages, `num_segments` will always be 0 in Kandy's response to your API request. </summary> 
        [JsonProperty("num_segments")]
        public string NumSegments { get; private set; }


        [JsonProperty("direction")]
        public MessageResource.DirectionEnum Direction { get; private set; }

        ///<summary> The phone number (in [E.164](https://en.wikipedia.org/wiki/E.164) format), [alphanumeric sender ID](https://www.kandy.com/docs/sms/send-messages#use-an-alphanumeric-sender-id), or [Wireless SIM](https://www.kandy.com/docs/wireless/tutorials/communications-guides/how-to-send-and-receive-text-messages) that initiated the message. For incoming messages, this will be the number of the sending phone. For outgoing messages, this value will be one of your Kandy phone numbers or the alphanumeric sender ID used. </summary> 
        [JsonProperty("from")]
        [JsonConverter(typeof(PhoneNumberConverter))]
        public Types.PhoneNumber From { get; private set; }

        ///<summary> The phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format that received the message. For incoming messages, this will be one of your Kandy phone numbers. For outgoing messages, this will be the sending phone. </summary> 
        [JsonProperty("to")]
        public string To { get; private set; }

        ///<summary> The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The amount billed for the message, in the currency specified by `price_unit`.  Note that your account is charged for each segment we send to the handset. Populated after the message has been sent. May not be immediately available. </summary> 
        [JsonProperty("price")]
        public string Price { get; private set; }

        ///<summary> The description of the `error_code` if your message `status` is `failed` or `undelivered`. If the message was successful, this value is null. </summary> 
        [JsonProperty("error_message")]
        public string ErrorMessage { get; private set; }

        ///<summary> The URI of the resource, relative to `https://api.kandy.com`. </summary> 
        [JsonProperty("uri")]
        public string Uri { get; private set; }

        ///<summary> The SID of the [Account](https://www.kandy.com/docs/iam/api/account) that sent the message that created the resource. </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The number of media files associated with the message. A message can send up to 10 media files. </summary> 
        [JsonProperty("num_media")]
        public string NumMedia { get; private set; }


        [JsonProperty("status")]
        public MessageResource.StatusEnum Status { get; private set; }

        ///<summary> The SID of the [Messaging Service](https://www.kandy.com/docs/sms/services/api) used with the message. The value is null if a Messaging Service was not used. </summary> 
        [JsonProperty("messaging_service_sid")]
        public string MessagingServiceSid { get; private set; }

        ///<summary> The unique string that that we created to identify the Message resource. </summary> 
        [JsonProperty("sid")]
        public string Sid { get; private set; }

        ///<summary> The date and time in GMT that the resource was sent specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. For outgoing messages, this is when we sent the message. For incoming messages, this is when we made the HTTP request to your application.  </summary> 
        [JsonProperty("date_sent")]
        public DateTime? DateSent { get; private set; }

        ///<summary> The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. </summary> 
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The error code returned if your message `status` is `failed` or `undelivered`. The error_code provides more information about the failure. If the message was successful, this value is null. </summary> 
        [JsonProperty("error_code")]
        public int? ErrorCode { get; private set; }

        ///<summary> The currency in which `price` is measured, in [ISO 4127](https://www.iso.org/iso/home/standards/currency_codes.htm) format (e.g. `usd`, `eur`, `jpy`). </summary> 
        [JsonProperty("price_unit")]
        public string PriceUnit { get; private set; }

        ///<summary> The API version used to process the message. </summary> 
        [JsonProperty("api_version")]
        public string ApiVersion { get; private set; }

        ///<summary> A list of related resources identified by their URIs relative to `https://api.kandy.com` </summary> 
        [JsonProperty("subresource_uris")]
        public Dictionary<string, string> SubresourceUris { get; private set; }



        private MessageResource()
        {

        }
    }
}
