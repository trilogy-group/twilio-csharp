/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;



namespace Kandy.Rest.Preview.Understand.Assistant
{
    public class AssistantInitiationActionsResource : Resource
    {



        private static Request BuildFetchRequest(FetchAssistantInitiationActionsOptions options, IKandyRestClient client)
        {

            string path = "/understand/Assistants/{AssistantSid}/InitiationActions";

            string PathAssistantSid = options.PathAssistantSid;
            path = path.Replace("{" + "AssistantSid" + "}", PathAssistantSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Preview,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> fetch </summary>
        /// <param name="options"> Fetch AssistantInitiationActions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of AssistantInitiationActions </returns>
        public static AssistantInitiationActionsResource Fetch(FetchAssistantInitiationActionsOptions options, IKandyRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

#if !NET35
        /// <summary> fetch </summary>
        /// <param name="options"> Fetch AssistantInitiationActions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of AssistantInitiationActions </returns>
        public static async System.Threading.Tasks.Task<AssistantInitiationActionsResource> FetchAsync(FetchAssistantInitiationActionsOptions options,
                                                                                             IKandyRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
#endif
        /// <summary> fetch </summary>
        /// <param name="pathAssistantSid">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of AssistantInitiationActions </returns>
        public static AssistantInitiationActionsResource Fetch(
                                         string pathAssistantSid,
                                         IKandyRestClient client = null)
        {
            var options = new FetchAssistantInitiationActionsOptions(pathAssistantSid) { };
            return Fetch(options, client);
        }

#if !NET35
        /// <summary> fetch </summary>
        /// <param name="pathAssistantSid">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of AssistantInitiationActions </returns>
        public static async System.Threading.Tasks.Task<AssistantInitiationActionsResource> FetchAsync(string pathAssistantSid, IKandyRestClient client = null)
        {
            var options = new FetchAssistantInitiationActionsOptions(pathAssistantSid) { };
            return await FetchAsync(options, client);
        }
#endif

        private static Request BuildUpdateRequest(UpdateAssistantInitiationActionsOptions options, IKandyRestClient client)
        {

            string path = "/understand/Assistants/{AssistantSid}/InitiationActions";

            string PathAssistantSid = options.PathAssistantSid;
            path = path.Replace("{" + "AssistantSid" + "}", PathAssistantSid);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Preview,
                path,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> update </summary>
        /// <param name="options"> Update AssistantInitiationActions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of AssistantInitiationActions </returns>
        public static AssistantInitiationActionsResource Update(UpdateAssistantInitiationActionsOptions options, IKandyRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> update </summary>
        /// <param name="options"> Update AssistantInitiationActions parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of AssistantInitiationActions </returns>
#if !NET35
        public static async System.Threading.Tasks.Task<AssistantInitiationActionsResource> UpdateAsync(UpdateAssistantInitiationActionsOptions options,
                                                                                                          IKandyRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
#endif

        /// <summary> update </summary>
        /// <param name="pathAssistantSid">  </param>
        /// <param name="initiationActions">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of AssistantInitiationActions </returns>
        public static AssistantInitiationActionsResource Update(
                                          string pathAssistantSid,
                                          object initiationActions = null,
                                          IKandyRestClient client = null)
        {
            var options = new UpdateAssistantInitiationActionsOptions(pathAssistantSid) { InitiationActions = initiationActions };
            return Update(options, client);
        }

#if !NET35
        /// <summary> update </summary>
        /// <param name="pathAssistantSid">  </param>
        /// <param name="initiationActions">  </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of AssistantInitiationActions </returns>
        public static async System.Threading.Tasks.Task<AssistantInitiationActionsResource> UpdateAsync(
                                                                              string pathAssistantSid,
                                                                              object initiationActions = null,
                                                                              IKandyRestClient client = null)
        {
            var options = new UpdateAssistantInitiationActionsOptions(pathAssistantSid) { InitiationActions = initiationActions };
            return await UpdateAsync(options, client);
        }
#endif

        /// <summary>
        /// Converts a JSON string into a AssistantInitiationActionsResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> AssistantInitiationActionsResource object represented by the provided JSON </returns>
        public static AssistantInitiationActionsResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<AssistantInitiationActionsResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }


        ///<summary> The account_sid </summary> 
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }

        ///<summary> The assistant_sid </summary> 
        [JsonProperty("assistant_sid")]
        public string AssistantSid { get; private set; }

        ///<summary> The url </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        ///<summary> The data </summary> 
        [JsonProperty("data")]
        public object Data { get; private set; }



        private AssistantInitiationActionsResource()
        {

        }
    }
}
