/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Kandy - Microvisor
 * This is the public Kandy REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Kandy.Base;
using Kandy.Clients;
using Kandy.Converters;
using Kandy.Exceptions;
using Kandy.Http;



namespace Kandy.Rest.Microvisor.V1
{
    public class AccountSecretResource : Resource
    {



        private static Request BuildCreateRequest(CreateAccountSecretOptions options, IKandyRestClient client)
        {

            string path = "/v1/Secrets";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.Microvisor,
                path,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Create a secret for an Account. </summary>
        /// <param name="options"> Create AccountSecret parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of AccountSecret </returns>
        public static AccountSecretResource Create(CreateAccountSecretOptions options, IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

#if !NET35
        /// <summary> Create a secret for an Account. </summary>
        /// <param name="options"> Create AccountSecret parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of AccountSecret </returns>
        public static async System.Threading.Tasks.Task<AccountSecretResource> CreateAsync(CreateAccountSecretOptions options,
        IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
#endif

        /// <summary> Create a secret for an Account. </summary>
        /// <param name="key"> The secret key; up to 100 characters. </param>
        /// <param name="value"> The secret value; up to 4096 characters. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of AccountSecret </returns>
        public static AccountSecretResource Create(
                                          string key,
                                          string value,
                                          IKandyRestClient client = null)
        {
            var options = new CreateAccountSecretOptions(key, value) { };
            return Create(options, client);
        }

#if !NET35
        /// <summary> Create a secret for an Account. </summary>
        /// <param name="key"> The secret key; up to 100 characters. </param>
        /// <param name="value"> The secret value; up to 4096 characters. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of AccountSecret </returns>
        public static async System.Threading.Tasks.Task<AccountSecretResource> CreateAsync(
                                                                                  string key,
                                                                                  string value,
                                                                                  IKandyRestClient client = null)
        {
            var options = new CreateAccountSecretOptions(key, value) { };
            return await CreateAsync(options, client);
        }
#endif

        /// <summary> Delete a secret for an Account. </summary>
        /// <param name="options"> Delete AccountSecret parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of AccountSecret </returns>
        private static Request BuildDeleteRequest(DeleteAccountSecretOptions options, IKandyRestClient client)
        {

            string path = "/v1/Secrets/{Key}";

            string PathKey = options.PathKey;
            path = path.Replace("{" + "Key" + "}", PathKey);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Microvisor,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Delete a secret for an Account. </summary>
        /// <param name="options"> Delete AccountSecret parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of AccountSecret </returns>
        public static bool Delete(DeleteAccountSecretOptions options, IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

#if !NET35
        /// <summary> Delete a secret for an Account. </summary>
        /// <param name="options"> Delete AccountSecret parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of AccountSecret </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteAccountSecretOptions options,
                                                                          IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
#endif

        /// <summary> Delete a secret for an Account. </summary>
        /// <param name="pathKey"> The secret key; up to 100 characters. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of AccountSecret </returns>
        public static bool Delete(string pathKey, IKandyRestClient client = null)
        {
            var options = new DeleteAccountSecretOptions(pathKey);
            return Delete(options, client);
        }

#if !NET35
        /// <summary> Delete a secret for an Account. </summary>
        /// <param name="pathKey"> The secret key; up to 100 characters. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of AccountSecret </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathKey, IKandyRestClient client = null)
        {
            var options = new DeleteAccountSecretOptions(pathKey);
            return await DeleteAsync(options, client);
        }
#endif

        private static Request BuildFetchRequest(FetchAccountSecretOptions options, IKandyRestClient client)
        {

            string path = "/v1/Secrets/{Key}";

            string PathKey = options.PathKey;
            path = path.Replace("{" + "Key" + "}", PathKey);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Microvisor,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Retrieve a Secret for an Account. </summary>
        /// <param name="options"> Fetch AccountSecret parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of AccountSecret </returns>
        public static AccountSecretResource Fetch(FetchAccountSecretOptions options, IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

#if !NET35
        /// <summary> Retrieve a Secret for an Account. </summary>
        /// <param name="options"> Fetch AccountSecret parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of AccountSecret </returns>
        public static async System.Threading.Tasks.Task<AccountSecretResource> FetchAsync(FetchAccountSecretOptions options,
                                                                                             IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
#endif
        /// <summary> Retrieve a Secret for an Account. </summary>
        /// <param name="pathKey"> The secret key; up to 100 characters. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of AccountSecret </returns>
        public static AccountSecretResource Fetch(
                                         string pathKey,
                                         IKandyRestClient client = null)
        {
            var options = new FetchAccountSecretOptions(pathKey) { };
            return Fetch(options, client);
        }

#if !NET35
        /// <summary> Retrieve a Secret for an Account. </summary>
        /// <param name="pathKey"> The secret key; up to 100 characters. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of AccountSecret </returns>
        public static async System.Threading.Tasks.Task<AccountSecretResource> FetchAsync(string pathKey, IKandyRestClient client = null)
        {
            var options = new FetchAccountSecretOptions(pathKey) { };
            return await FetchAsync(options, client);
        }
#endif

        private static Request BuildReadRequest(ReadAccountSecretOptions options, IKandyRestClient client)
        {

            string path = "/v1/Secrets";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.Microvisor,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> Retrieve a list of all Secrets for an Account. </summary>
        /// <param name="options"> Read AccountSecret parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of AccountSecret </returns>
        public static ResourceSet<AccountSecretResource> Read(ReadAccountSecretOptions options, IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));
            var page = Page<AccountSecretResource>.FromJson("secrets", response.Content);
            return new ResourceSet<AccountSecretResource>(page, options, client);
        }

#if !NET35
        /// <summary> Retrieve a list of all Secrets for an Account. </summary>
        /// <param name="options"> Read AccountSecret parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of AccountSecret </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<AccountSecretResource>> ReadAsync(ReadAccountSecretOptions options,
                                                                                             IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<AccountSecretResource>.FromJson("secrets", response.Content);
            return new ResourceSet<AccountSecretResource>(page, options, client);
        }
#endif
        /// <summary> Retrieve a list of all Secrets for an Account. </summary>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of AccountSecret </returns>
        public static ResourceSet<AccountSecretResource> Read(
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                     IKandyRestClient client = null)
        {
            var options = new ReadAccountSecretOptions() { PageSize = pageSize, Limit = limit };
            return Read(options, client);
        }

#if !NET35
        /// <summary> Retrieve a list of all Secrets for an Account. </summary>
        /// <param name="pageSize"> How many resources to return in each list page. The default is 50, and the maximum is 1000. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of AccountSecret </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<AccountSecretResource>> ReadAsync(
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                             IKandyRestClient client = null)
        {
            var options = new ReadAccountSecretOptions() { PageSize = pageSize, Limit = limit };
            return await ReadAsync(options, client);
        }
#endif


        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> The target page of records </returns>
        public static Page<AccountSecretResource> GetPage(string targetUrl, IKandyRestClient client)
        {
            client = client ?? KandyClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<AccountSecretResource>.FromJson("secrets", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> The next page of records </returns>
        public static Page<AccountSecretResource> NextPage(Page<AccountSecretResource> page, IKandyRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<AccountSecretResource>.FromJson("secrets", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> The previous page of records </returns>
        public static Page<AccountSecretResource> PreviousPage(Page<AccountSecretResource> page, IKandyRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var response = client.Request(request);
            return Page<AccountSecretResource>.FromJson("secrets", response.Content);
        }


        private static Request BuildUpdateRequest(UpdateAccountSecretOptions options, IKandyRestClient client)
        {

            string path = "/v1/Secrets/{Key}";

            string PathKey = options.PathKey;
            path = path.Replace("{" + "Key" + "}", PathKey);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Microvisor,
                path,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Update a secret for an Account. </summary>
        /// <param name="options"> Update AccountSecret parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of AccountSecret </returns>
        public static AccountSecretResource Update(UpdateAccountSecretOptions options, IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> Update a secret for an Account. </summary>
        /// <param name="options"> Update AccountSecret parameters </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of AccountSecret </returns>
#if !NET35
        public static async System.Threading.Tasks.Task<AccountSecretResource> UpdateAsync(UpdateAccountSecretOptions options,
                                                                                                          IKandyRestClient client = null)
        {
            client = client ?? KandyClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
#endif

        /// <summary> Update a secret for an Account. </summary>
        /// <param name="pathKey"> The secret key; up to 100 characters. </param>
        /// <param name="value"> The secret value; up to 4096 characters. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> A single instance of AccountSecret </returns>
        public static AccountSecretResource Update(
                                          string pathKey,
                                          string value,
                                          IKandyRestClient client = null)
        {
            var options = new UpdateAccountSecretOptions(pathKey, value) { };
            return Update(options, client);
        }

#if !NET35
        /// <summary> Update a secret for an Account. </summary>
        /// <param name="pathKey"> The secret key; up to 100 characters. </param>
        /// <param name="value"> The secret value; up to 4096 characters. </param>
        /// <param name="client"> Client to make requests to Kandy </param>
        /// <returns> Task that resolves to A single instance of AccountSecret </returns>
        public static async System.Threading.Tasks.Task<AccountSecretResource> UpdateAsync(
                                                                              string pathKey,
                                                                              string value,
                                                                              IKandyRestClient client = null)
        {
            var options = new UpdateAccountSecretOptions(pathKey, value) { };
            return await UpdateAsync(options, client);
        }
#endif

        /// <summary>
        /// Converts a JSON string into a AccountSecretResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> AccountSecretResource object represented by the provided JSON </returns>
        public static AccountSecretResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<AccountSecretResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }


        ///<summary> The secret key; up to 100 characters. </summary> 
        [JsonProperty("key")]
        public string Key { get; private set; }

        ///<summary> The date_rotated </summary> 
        [JsonProperty("date_rotated")]
        public DateTime? DateRotated { get; private set; }

        ///<summary> The absolute URL of the Secret. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private AccountSecretResource()
        {

        }
    }
}
