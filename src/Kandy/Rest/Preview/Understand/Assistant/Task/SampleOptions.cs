/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Kandy - Preview
 * This is the public Kandy REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Kandy.Base;
using Kandy.Converters;




namespace Kandy.Rest.Preview.Understand.Assistant.Task
{

    /// <summary> create </summary>
    public class CreateSampleOptions : IOptions<SampleResource>
    {

        ///<summary> The unique ID of the Assistant. </summary> 
        public string PathAssistantSid { get; }

        ///<summary> The unique ID of the Task associated with this Sample. </summary> 
        public string PathTaskSid { get; }

        ///<summary> An ISO language-country string of the sample. </summary> 
        public string Language { get; }

        ///<summary> The text example of how end-users may express this task. The sample may contain Field tag blocks. </summary> 
        public string TaggedText { get; }

        ///<summary> The communication channel the sample was captured. It can be: *voice*, *sms*, *chat*, *alexa*, *google-assistant*, or *slack*. If not included the value will be null </summary> 
        public string SourceChannel { get; set; }


        /// <summary> Construct a new CreateUnderstandSampleOptions </summary>
        /// <param name="pathAssistantSid"> The unique ID of the Assistant. </param>
        /// <param name="pathTaskSid"> The unique ID of the Task associated with this Sample. </param>
        /// <param name="language"> An ISO language-country string of the sample. </param>
        /// <param name="taggedText"> The text example of how end-users may express this task. The sample may contain Field tag blocks. </param>
        public CreateSampleOptions(string pathAssistantSid, string pathTaskSid, string language, string taggedText)
        {
            PathAssistantSid = pathAssistantSid;
            PathTaskSid = pathTaskSid;
            Language = language;
            TaggedText = taggedText;
        }


        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Language != null)
            {
                p.Add(new KeyValuePair<string, string>("Language", Language));
            }
            if (TaggedText != null)
            {
                p.Add(new KeyValuePair<string, string>("TaggedText", TaggedText));
            }
            if (SourceChannel != null)
            {
                p.Add(new KeyValuePair<string, string>("SourceChannel", SourceChannel));
            }
            return p;
        }


    }
    /// <summary> delete </summary>
    public class DeleteSampleOptions : IOptions<SampleResource>
    {

        ///<summary> The unique ID of the Assistant. </summary> 
        public string PathAssistantSid { get; }

        ///<summary> The unique ID of the Task associated with this Sample. </summary> 
        public string PathTaskSid { get; }

        ///<summary> A 34 character string that uniquely identifies this resource. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteUnderstandSampleOptions </summary>
        /// <param name="pathAssistantSid"> The unique ID of the Assistant. </param>
        /// <param name="pathTaskSid"> The unique ID of the Task associated with this Sample. </param>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this resource. </param>
        public DeleteSampleOptions(string pathAssistantSid, string pathTaskSid, string pathSid)
        {
            PathAssistantSid = pathAssistantSid;
            PathTaskSid = pathTaskSid;
            PathSid = pathSid;
        }


        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }


    }


    /// <summary> fetch </summary>
    public class FetchSampleOptions : IOptions<SampleResource>
    {

        ///<summary> The unique ID of the Assistant. </summary> 
        public string PathAssistantSid { get; }

        ///<summary> The unique ID of the Task associated with this Sample. </summary> 
        public string PathTaskSid { get; }

        ///<summary> A 34 character string that uniquely identifies this resource. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchUnderstandSampleOptions </summary>
        /// <param name="pathAssistantSid"> The unique ID of the Assistant. </param>
        /// <param name="pathTaskSid"> The unique ID of the Task associated with this Sample. </param>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this resource. </param>
        public FetchSampleOptions(string pathAssistantSid, string pathTaskSid, string pathSid)
        {
            PathAssistantSid = pathAssistantSid;
            PathTaskSid = pathTaskSid;
            PathSid = pathSid;
        }


        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }


    }


    /// <summary> read </summary>
    public class ReadSampleOptions : ReadOptions<SampleResource>
    {

        ///<summary> The unique ID of the Assistant. </summary> 
        public string PathAssistantSid { get; }

        ///<summary> The unique ID of the Task associated with this Sample. </summary> 
        public string PathTaskSid { get; }

        ///<summary> An ISO language-country string of the sample. </summary> 
        public string Language { get; set; }



        /// <summary> Construct a new ListUnderstandSampleOptions </summary>
        /// <param name="pathAssistantSid"> The unique ID of the Assistant. </param>
        /// <param name="pathTaskSid"> The unique ID of the Task associated with this Sample. </param>
        public ReadSampleOptions(string pathAssistantSid, string pathTaskSid)
        {
            PathAssistantSid = pathAssistantSid;
            PathTaskSid = pathTaskSid;
        }


        /// <summary> Generate the necessary parameters </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Language != null)
            {
                p.Add(new KeyValuePair<string, string>("Language", Language));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }


    }

    /// <summary> update </summary>
    public class UpdateSampleOptions : IOptions<SampleResource>
    {

        ///<summary> The unique ID of the Assistant. </summary> 
        public string PathAssistantSid { get; }

        ///<summary> The unique ID of the Task associated with this Sample. </summary> 
        public string PathTaskSid { get; }

        ///<summary> A 34 character string that uniquely identifies this resource. </summary> 
        public string PathSid { get; }

        ///<summary> An ISO language-country string of the sample. </summary> 
        public string Language { get; set; }

        ///<summary> The text example of how end-users may express this task. The sample may contain Field tag blocks. </summary> 
        public string TaggedText { get; set; }

        ///<summary> The communication channel the sample was captured. It can be: *voice*, *sms*, *chat*, *alexa*, *google-assistant*, or *slack*. If not included the value will be null </summary> 
        public string SourceChannel { get; set; }



        /// <summary> Construct a new UpdateUnderstandSampleOptions </summary>
        /// <param name="pathAssistantSid"> The unique ID of the Assistant. </param>
        /// <param name="pathTaskSid"> The unique ID of the Task associated with this Sample. </param>
        /// <param name="pathSid"> A 34 character string that uniquely identifies this resource. </param>
        public UpdateSampleOptions(string pathAssistantSid, string pathTaskSid, string pathSid)
        {
            PathAssistantSid = pathAssistantSid;
            PathTaskSid = pathTaskSid;
            PathSid = pathSid;
        }


        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Language != null)
            {
                p.Add(new KeyValuePair<string, string>("Language", Language));
            }
            if (TaggedText != null)
            {
                p.Add(new KeyValuePair<string, string>("TaggedText", TaggedText));
            }
            if (SourceChannel != null)
            {
                p.Add(new KeyValuePair<string, string>("SourceChannel", SourceChannel));
            }
            return p;
        }


    }


}
